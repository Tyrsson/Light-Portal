<?php

/**
 * SimpleMenu
 *
 * @package Light Portal
 * @link https://github.com/dragomano/Light-Portal
 * @author Bugo <bugo@dragomano.ru>
 * @copyright 2021 Bugo
 * @license https://spdx.org/licenses/GPL-3.0-or-later.html GPL-3.0-or-later
 *
 * @version 1.9
 */

namespace Bugo\LightPortal\Addons\SimpleMenu;

use Bugo\LightPortal\Addons\Plugin;
use Bugo\LightPortal\Helpers;

/**
 * Generated by PluginMaker
 */
class SimpleMenu extends Plugin
{
	/** @var string */
	public $icon = 'far fa-list-alt';

	/**
	 * @param array $options
	 * @return void
	 */
	public function blockOptions(&$options)
	{
		$options['simple_menu']['parameters']['items'] = '';
	}

	/**
	 * @param array $parameters
	 * @param string $type
	 * @return void
	 */
	public function validateBlockData(&$parameters, $type)
	{
		if ($type !== 'simple_menu')
			return;

		$data = Helpers::post()->only(['item_name', 'item_link']);

		$items = [];
		if (!empty($data) && !empty($data['item_name']) && !empty($data['item_link'])) {
			foreach ($data['item_name'] as $key => $item) {
				if (empty($link = $data['item_link'][$key]))
					continue;

				$items[] = [
					'name' => $item,
					'link' => $link
				];
			}

			Helpers::post()->put('items', json_encode($items, JSON_UNESCAPED_UNICODE));
		}

		$parameters['items'] = FILTER_DEFAULT;
	}

	/**
	 * @return void
	 */
	public function prepareBlockFields()
	{
		global $context, $txt;

		if ($context['lp_block']['type'] !== 'simple_menu')
			return;

		$this->loadTemplate();

		addInlineJavaScript('
		function handleItems() {
			return {
				items: ' . ($context['lp_block']['options']['parameters']['items'] ?: '[]') . ',
				addNewItem() {
					this.items.push({
						name: "",
						link: ""
					})
				},
				removeItem(index) {
					this.items.splice(index, 1)
				}
			}
		}');

		$context['posting_fields']['items']['label']['html'] = $txt['lp_simple_menu']['items'];
		$context['posting_fields']['items']['input']['html'] = simple_menu_items();
		$context['posting_fields']['items']['input']['tab']  = 'content';
	}

	/**
	 * @param string $items
	 * @return string
	 */
	public function getHtml(string $items): string
	{
		global $scripturl, $context;

		if (empty($items))
			return '';

		$html = '
		<ul class="dropmenu">';

		$items = json_decode($items, true);

		foreach ($items as $item) {
			[$title, $link] = [$item['name'], $item['link']];

			$ext = true;
			if (strpos($link, 'http') !== 0) {
				$active = $link == $context['current_action'];
				$link   = $scripturl . '?action=' . $link;
				$ext    = false;
			}

			$html .= '
			<li style="width: 100%">
				<a' . (!empty($active) ? ' class="active"' : '') . ' href="' . $link . '"' . (!empty($ext) ? ' target="_blank" rel="noopener"' : '') . '>
					<span>' . $title . '</span>
				</a>
			</li>';
		}

		$html .= '
		</ul>';

		return $html;
	}

	/**
	 * @param string $type
	 * @param int $block_id
	 * @param int $cache_time
	 * @param array $parameters
	 * @return void
	 */
	public function prepareContent($type, $block_id, $cache_time, $parameters)
	{
		if ($type !== 'simple_menu' || empty($parameters['items']))
			return;

		$simple_menu_html = Helpers::cache('simple_menu_addon_b' . $block_id)
			->setLifeTime($cache_time)
			->setFallback(__CLASS__, 'getHtml', $parameters['items']);

		if (empty($simple_menu_html))
			return;

		echo $simple_menu_html;
	}
}
