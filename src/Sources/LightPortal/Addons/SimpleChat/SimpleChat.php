<?php

/**
 * SimpleChat.php
 *
 * @package SimpleChat (Light Portal)
 * @link https://custom.simplemachines.org/index.php?mod=4244
 * @author Bugo <bugo@dragomano.ru>
 * @copyright 2023 Bugo
 * @license https://opensource.org/licenses/MIT MIT
 *
 * @category addon
 * @version 03.06.23
 */

namespace Bugo\LightPortal\Addons\SimpleChat;

use Bugo\LightPortal\Addons\Block;

if (! defined('LP_NAME'))
	die('No direct access...');

/**
 * Generated by PluginMaker
 */
class SimpleChat extends Block
{
	public string $icon = 'fas fa-message';

	private Chat $chat;

	public function __construct()
	{
		$this->chat = new Chat;
	}

	public function init()
	{
		$this->applyHook('actions');
	}

	public function actions()
	{
		if ($this->request()->isNot('portal'))
			return;

		if ($this->request()->has('chat') && $this->request('chat') === 'post') {
			$this->chat->addMessage();
		}

		if ($this->request()->has('chat') && $this->request('chat') === 'update') {
			$this->chat->deleteMessage();
		}
	}

	public function addSettings()
	{
		$this->prepareTable();
	}

	public function blockOptions(array &$options)
	{
		$options['simple_chat']['parameters'] = [
			'show_avatars' => false,
		];
	}

	public function validateBlockData(array &$parameters, string $type)
	{
		if ($type !== 'simple_chat')
			return;

		$parameters['show_avatars'] = FILTER_VALIDATE_BOOLEAN;
	}

	public function prepareBlockFields()
	{
		if ($this->context['lp_block']['type'] !== 'simple_chat')
			return;

		$this->context['posting_fields']['show_avatars']['label']['text'] = $this->txt['lp_simple_chat']['show_avatars'];
		$this->context['posting_fields']['show_avatars']['input'] = [
			'type' => 'checkbox',
			'attributes' => [
				'id'      => 'show_avatars',
				'checked' => $this->context['lp_block']['options']['parameters']['show_avatars']
			],
			'tab' => 'appearance'
		];
	}

	public function getData(int $block_id, array $parameters): array
	{
		$messages = $this->chat->getMessages($block_id);

		if ($parameters['show_avatars'])
			$messages = $this->getItemsWithUserAvatars($messages);

		return $messages;
	}

	public function prepareContent(string $type, int $block_id, int $cache_time, array $parameters)
	{
		if ($type !== 'simple_chat')
			return;

		$this->loadCssFile('admin.css');
		$this->loadJavaScriptFile('light_portal/alpine.min.js', ['defer' => true]);

		$parameters['show_avatars'] ??= false;

		$messages = $this->cache('simple_chat_addon_b' . $block_id)
			->setLifeTime($cache_time)
			->setFallback(self::class, 'getData', $block_id, $parameters);

		$this->context['lp_chats'][$block_id] = json_encode($messages, JSON_UNESCAPED_UNICODE);

		$this->setTemplate();

		show_chat_block($block_id, (bool) $parameters['show_avatars'], $this->isBlockInPlacements($block_id, ['left', 'right']));
	}

	public function onBlockRemoving(array $items)
	{
		$this->smcFunc['db_query']('', '
			DELETE FROM {db_prefix}lp_simple_chat_messages
			WHERE block_id IN ({array_int:items})',
			[
				'items' => $items,
			]
		);
	}

	private function prepareTable()
	{
		$tables = [];

		$this->dbExtend('packages');

		if (! empty($this->smcFunc['db_list_tables'](false, $this->db_prefix . 'lp_simple_chat_messages')))
			return;

		$tables[] = [
			'name' => 'lp_simple_chat_messages',
			'columns' => [
				[
					'name'     => 'id',
					'type'     => 'int',
					'size'     => 10,
					'unsigned' => true,
					'auto'     => true
				],
				[
					'name'     => 'block_id',
					'type'     => 'int',
					'size'     => 10,
					'unsigned' => true
				],
				[
					'name'     => 'user_id',
					'type'     => 'int',
					'size'     => 10,
					'unsigned' => true
				],
				[
					'name' => 'message',
					'type' => 'varchar',
					'size' => 255,
					'null' => false
				],
				[
					'name'     => 'created_at',
					'type'     => 'int',
					'size'     => 10,
					'unsigned' => true,
					'default'  => 0
				]
			],
			'indexes' => [
				[
					'type'    => 'primary',
					'columns' => ['id']
				]
			]
		];

		foreach ($tables as $table) {
			$this->smcFunc['db_create_table']('{db_prefix}' . $table['name'], $table['columns'], $table['indexes']);
		}
	}
}
